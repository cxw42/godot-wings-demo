[gd_scene load_steps=28 format=3 uid="uid://dv0180t8hngpc"]

[ext_resource type="PackedScene" uid="uid://b5x4ronrhv2tt" path="res://h_slider_label.tscn" id="2_fifn5"]

[sub_resource type="GDScript" id="GDScript_fifn5"]
resource_name = "top_node.gd"
script/source = "extends Node3D
@onready var b_beam: RigidBody3D = $B
@onready var a_beam: StaticBody3D = $\"Base (A)\"
@onready var c_beam: RigidBody3D = $C
@onready var d_beam: RigidBody3D = $D
@onready var e_beam: RigidBody3D = $E
@onready var f_beam: RigidBody3D = $F
@onready var a_to_b: HingeJoint3D = $\"A to B\"
@onready var c_to_d: HingeJoint3D = $\"C to D\"
@onready var b_to_d: HingeJoint3D = $\"B to D\"
@onready var a_to_c: HingeJoint3D = $\"A to C\"
@onready var c_to_e: HingeJoint3D = $\"C to E\"
@onready var d_to_f: HingeJoint3D = $\"D to F\"
@onready var e_to_f: HingeJoint3D = $\"E to F\"

# Lengths of the beams (inches)
var a: float
var b: float
var c: float
var d: float
var e: float
var f: float

# How far along the beams the mid-beam joints are
var along_c_pct: float ## c->d pctage of the way along C, 0..1
var along_f_pct: float ## e->f pctage of the way along F, 0..1

## Resize a beam having a CSGMesh3D child and a CollisionShape3D child,
## in that order.
func resize_beam_(beam: Node3D, length_m: float):
    if not beam:
        return

    var mesh := beam.get_child(0) as CSGMesh3D
    var box := mesh.mesh as BoxMesh
    box.size.y = length_m

    var collision := beam.get_child(1) as CollisionShape3D
    var shape := collision.shape as BoxShape3D
    shape.size.y = length_m

## inches to meters.  The GUI is in inches.
func i2m(inches: float):
    return inches/39.37

func rebuild_():
    if not is_inside_tree() or not a_to_b:
        return

    var a_m = i2m(a)
    var b_m = i2m(b)
    var c_m = i2m(c)
    var d_m = i2m(d)
    var e_m = i2m(e)
    var f_m = i2m(f)

    # Resize
    resize_beam_(a_beam, a_m)
    resize_beam_(b_beam, b_m)
    resize_beam_(c_beam, c_m)
    resize_beam_(d_beam, d_m)
    resize_beam_(e_beam, e_m)
    resize_beam_(f_beam, f_m)

    # Reposition the end-of-beam joints, starting from the base (A).
    # Each beam's Y axis extends along the beam, away from A.
    a_to_b.global_position = a_beam.global_position - a_beam.global_basis.y * Vector3(0,a_m/2,0)
    a_to_c.global_position = a_beam.global_position + a_beam.global_basis.y * Vector3(0,a_m/2,0)
    b_to_d.global_position = a_to_b.global_position + b_beam.global_basis.y * Vector3(0,b_m,0)
    c_to_e.global_position = c_beam.global_position + c_beam.global_basis.y * Vector3(0,c_m,0)
    d_to_f.global_position = d_beam.global_position + d_beam.global_basis.y * Vector3(0,d_m,0)

    # Central ones
    c_to_d.global_position = c_beam.global_position + c_beam.global_basis.y * Vector3(0,c_m*along_c_pct,0)
    e_to_f.global_position = f_beam.global_position + f_beam.global_basis.y * Vector3(0,f_m*along_f_pct,0)

func _unhandled_input(event: InputEvent) -> void:
    if event.is_action_pressed(\"ui_cancel\"):
        get_tree().quit()

func _on_desired_angle_value_changed(value: float) -> void:
    b_beam.desired_angle = value


func _on_a_length_value_changed(value: float) -> void:
    a = value
    rebuild_()


func _on_b_length_value_changed(value: float) -> void:
    b = value
    rebuild_()


func _on_c_length_value_changed(value: float) -> void:
    c = value
    rebuild_()


func _on_d_length_value_changed(value: float) -> void:
    d = value
    rebuild_()


func _on_e_length_value_changed(value: float) -> void:
    e = value
    rebuild_()


func _on_f_length_value_changed(value: float) -> void:
    f = value
    rebuild_()


func _on_cto_d_percentage_value_changed(value: float) -> void:
    along_c_pct = value
    rebuild_()


func _on_eto_f_pct_value_changed(value: float) -> void:
    along_f_pct = value
    rebuild_()


func _on_check_box_toggled(toggled_on: bool) -> void:
    b_beam.enabled = toggled_on
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_o6vgj"]
albedo_color = Color(0, 0, 1, 1)

[sub_resource type="PrismMesh" id="PrismMesh_fifn5"]
material = SubResource("StandardMaterial3D_o6vgj")
size = Vector3(5, 10, 0.1)

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_ic01r"]

[sub_resource type="BoxMesh" id="BoxMesh_o6vgj"]
size = Vector3(40, 1, 40)

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_o6vgj"]

[sub_resource type="BoxMesh" id="BoxMesh_oc6vn"]
size = Vector3(1, 7, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_afxlr"]
albedo_color = Color(0.419813, 0.419813, 0.419813, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_fifn5"]
size = Vector3(1, 7, 1)

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_fifn5"]

[sub_resource type="GDScript" id="GDScript_afxlr"]
resource_name = "beam_b"
script/source = "## Beam B
extends RigidBody3D

@onready var a_to_b: HingeJoint3D = $\"../A to B\"

@onready var current_angle_label: Label = $\"../HUD/Control/VBoxContainer/HBoxContainer/CurrentAngleLabel\"

@export var Kp: float = 100

@export var desired_angle: float = 0 ## degrees from X towards Y

@export var y_force_min: float = 100
@export var y_force_max: float = 450
@export var y_freq = 0.05

@export var enabled: bool = true

func _integrate_forces(state: PhysicsDirectBodyState3D) -> void:
    if not enabled:
        return

    # Get current angle w.r.t a_to_b
    var base_to_center = (global_position - a_to_b.global_position).normalized()
    var angle = rad_to_deg(atan2(base_to_center.y, base_to_center.x))
    current_angle_label.text = \"%.f\" % angle
    var difference = desired_angle - angle
    var force = Kp*difference
    # var force = sin(2*PI*y_freq*Time.get_ticks_msec()/1000)
    # force = remap(force, -1, 1, y_force_min, y_force_max)
    #print(force)
    var direction = -transform.basis.x # global_transform * (Vector3(0,1,1).normalized())
    state.apply_central_force(force * direction)
    %Arrow.global_transform = Transform3D().rotated(Vector3(0,0,-1), direction.angle_to(Vector3(0,1,0)))
"

[sub_resource type="BoxMesh" id="BoxMesh_sfd0x"]
size = Vector3(1, 5, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_h11p4"]
size = Vector3(1, 5, 1)

[sub_resource type="BoxMesh" id="BoxMesh_o6dvp"]
size = Vector3(1, 10, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_st5u5"]
size = Vector3(1, 10, 1)

[sub_resource type="BoxMesh" id="BoxMesh_afxlr"]
size = Vector3(1, 11.75, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_sfd0x"]
size = Vector3(1, 11.75, 1)

[sub_resource type="BoxMesh" id="BoxMesh_h11p4"]
size = Vector3(1, 7.5, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_o6dvp"]
size = Vector3(1, 7.5, 1)

[sub_resource type="BoxMesh" id="BoxMesh_st5u5"]
size = Vector3(1, 14.5, 1)

[sub_resource type="BoxShape3D" id="BoxShape3D_a0w0v"]
size = Vector3(1, 14.5, 1)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_o6vgj"]

[sub_resource type="Sky" id="Sky_fifn5"]
sky_material = SubResource("ProceduralSkyMaterial_o6vgj")

[sub_resource type="Environment" id="Environment_o6vgj"]
background_mode = 2
sky = SubResource("Sky_fifn5")

[sub_resource type="CameraAttributesPractical" id="CameraAttributesPractical_fifn5"]

[sub_resource type="Compositor" id="Compositor_oc6vn"]

[node name="Node3D" type="Node3D"]
script = SubResource("GDScript_fifn5")

[node name="Arrow" type="MeshInstance3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.27798, 0, 2.20119)
visible = false
mesh = SubResource("PrismMesh_fifn5")

[node name="Floor" type="StaticBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -22.8512, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor"]
shape = SubResource("WorldBoundaryShape3D_ic01r")

[node name="CSGMesh3D" type="CSGMesh3D" parent="Floor"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.016, -0.5, 0)
mesh = SubResource("BoxMesh_o6vgj")

[node name="Stopper" type="StaticBody3D" parent="."]
transform = Transform3D(0.65702, 0.753873, -6.59057e-08, 0.753873, -0.65702, 5.74385e-08, 8.84097e-16, -8.74228e-08, -1, 5.85721, 25.2701, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="Stopper"]
shape = SubResource("WorldBoundaryShape3D_ic01r")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.12363, 14.6625, 17.4076)
fov = 97.5

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.99818, 0.0602994, 0, -0.0602994, 0.99818, -2.48546, 7.73394, 4.94233)

[node name="Base (A)" type="StaticBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 0)
physics_material_override = SubResource("PhysicsMaterial_o6vgj")

[node name="CSGMesh3D" type="CSGMesh3D" parent="Base (A)"]
mesh = SubResource("BoxMesh_oc6vn")
material = SubResource("StandardMaterial3D_afxlr")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Base (A)"]
shape = SubResource("BoxShape3D_fifn5")

[node name="B" type="RigidBody3D" parent="."]
transform = Transform3D(0.43218, 0.901787, 0, -0.901787, 0.43218, 0, 0, 0, 1, 2.26396, 2.57417, 1.01775)
physics_material_override = SubResource("PhysicsMaterial_fifn5")
script = SubResource("GDScript_afxlr")
Kp = 200.0

[node name="CSGMesh3D" type="CSGMesh3D" parent="B"]
mesh = SubResource("BoxMesh_sfd0x")

[node name="CollisionShape3D" type="CollisionShape3D" parent="B"]
shape = SubResource("BoxShape3D_h11p4")

[node name="C" type="RigidBody3D" parent="."]
transform = Transform3D(0.43218, 0.901787, 0, -0.901787, 0.43218, 0, 0, 0, 1, 4.55078, 10.6468, 1.01775)
physics_material_override = SubResource("PhysicsMaterial_fifn5")

[node name="CSGMesh3D" type="CSGMesh3D" parent="C"]
mesh = SubResource("BoxMesh_o6dvp")

[node name="CollisionShape3D" type="CollisionShape3D" parent="C"]
shape = SubResource("BoxShape3D_st5u5")

[node name="D" type="RigidBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.61049, 9.51755, 0)
physics_material_override = SubResource("PhysicsMaterial_fifn5")

[node name="CSGMesh3D" type="CSGMesh3D" parent="D"]
mesh = SubResource("BoxMesh_afxlr")

[node name="CollisionShape3D" type="CollisionShape3D" parent="D"]
shape = SubResource("BoxShape3D_sfd0x")

[node name="E" type="RigidBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 9.13014, 16.5175, 0)
physics_material_override = SubResource("PhysicsMaterial_fifn5")

[node name="CSGMesh3D" type="CSGMesh3D" parent="E"]
mesh = SubResource("BoxMesh_h11p4")

[node name="CollisionShape3D" type="CollisionShape3D" parent="E"]
shape = SubResource("BoxShape3D_o6dvp")

[node name="F" type="RigidBody3D" parent="."]
transform = Transform3D(0.602526, 0.7981, 0, -0.7981, 0.602526, 0, 0, 0, 1, 10.4272, 19.8252, 1)
physics_material_override = SubResource("PhysicsMaterial_fifn5")

[node name="CSGMesh3D" type="CSGMesh3D" parent="F"]
mesh = SubResource("BoxMesh_st5u5")

[node name="CollisionShape3D" type="CollisionShape3D" parent="F"]
shape = SubResource("BoxShape3D_a0w0v")

[node name="A to B" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, 0)
node_a = NodePath("../Base (A)")
node_b = NodePath("../B")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="A to B"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="C to D" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.63736, 10.69, 0)
node_a = NodePath("../C")
node_b = NodePath("../D")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="C to D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="B to D" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.53802, 3.63695, 0)
node_a = NodePath("../B")
node_b = NodePath("../D")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="B to D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="A to C" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 8.5, 0)
node_a = NodePath("../Base (A)")
node_b = NodePath("../C")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="A to C"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="C to E" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 9.05056, 12.8354, 0)
node_a = NodePath("../C")
node_b = NodePath("../E")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="C to E"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="D to F" type="HingeJoint3D" parent="."]
transform = Transform3D(0.817597, 0.57579, 0, -0.57579, 0.817597, 0, 0, 0, 1, 4.62994, 15.4153, 0)
node_a = NodePath("../D")
node_b = NodePath("../F")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="D to F"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="E to F" type="HingeJoint3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 9.1494, 18.7696, 0)
node_a = NodePath("../E")
node_b = NodePath("../F")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="E to F"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
radius = 0.25

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_o6vgj")
camera_attributes = SubResource("CameraAttributesPractical_fifn5")
compositor = SubResource("Compositor_oc6vn")

[node name="HUD" type="CanvasLayer" parent="."]

[node name="Control" type="Control" parent="HUD"]
custom_minimum_size = Vector2(512, 512)
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/Control"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="CheckBox" type="CheckBox" parent="HUD/Control/VBoxContainer"]
layout_mode = 2
button_pressed = true
text = "Enable"

[node name="HBoxContainer" type="HBoxContainer" parent="HUD/Control/VBoxContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="HUD/Control/VBoxContainer/HBoxContainer"]
layout_mode = 2
text = "Current angle:"

[node name="CurrentAngleLabel" type="Label" parent="HUD/Control/VBoxContainer/HBoxContainer"]
custom_minimum_size = Vector2(20, 20)
layout_mode = 2
text = "angle"

[node name="DesiredAngle" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = -90.0
maximum = 90.0

[node name="A Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="B Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="C Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="D Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="E Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="F Length" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 1.0
maximum = 100.0

[node name="C-to-D percentage" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 0.05
maximum = 1.0
format_string = "%.2f"

[node name="E-to-F pct" parent="HUD/Control/VBoxContainer" instance=ExtResource("2_fifn5")]
layout_mode = 2
minimum = 0.05
maximum = 1.0
format_string = "%.2f"

[connection signal="toggled" from="HUD/Control/VBoxContainer/CheckBox" to="." method="_on_check_box_toggled"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/DesiredAngle" to="." method="_on_desired_angle_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/A Length" to="." method="_on_a_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/B Length" to="." method="_on_b_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/C Length" to="." method="_on_c_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/D Length" to="." method="_on_d_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/E Length" to="." method="_on_e_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/F Length" to="." method="_on_f_length_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/C-to-D percentage" to="." method="_on_cto_d_percentage_value_changed"]
[connection signal="value_changed" from="HUD/Control/VBoxContainer/E-to-F pct" to="." method="_on_eto_f_pct_value_changed"]
